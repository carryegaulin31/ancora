{"version":3,"sources":["components/Map/Map.js","containers/MapContainer/MapContainer.js","App.js","reportWebVitals.js","index.js"],"names":["reduceSize","trials","visited","trial","locations","length","country","push","flag","mid","Math","floor","random","GoogleApiWrapper","apiKey","process","GOOGLE_API_KEY","props","google","center","lat","Number","selectedLocation","lng","style","styles","onReady","_","map","bounds","window","maps","LatLngBounds","forEach","extend","LatLng","fitBounds","trialDetails","setZoom","onCenterChanged","onRecenter","otherLocations","location","index","title","facility_name","city","name","position","icon","url","MapContainer","Map","Data","App","className","href","src","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.624b9464.chunk.js","sourcesContent":["import React from \"react\";\nimport { Map, Marker, GoogleApiWrapper } from \"google-maps-react\";\n\nimport styles from \"../../App.css\";\n\nconst reduceSize = trials => {\n    let visited = [];\n    for (let trial of trials) {\n        // console.log(trial)\n        if (trial.locations && trial.locations[0]) {\n            if (visited.length === 0) {\n                if (trial.locations[0].country) {\n                    visited.push(trial);\n                }\n            } else {\n                if (trial.locations[0].country) {\n                    let flag = false;\n                    for (let visit of visited) {\n                        if (\n                            visit.locations[0].country ===\n                            trial.locations[0].country\n                        ) {\n                            flag = true;\n                            break;\n                        }\n                    }\n                    if (flag === false) {\n                        visited.push(trial);\n                    }\n                }\n            }\n        }\n    }\n    if (visited.length === 1 && trials.length > 1) {\n        let mid = Math.floor(trials.length / 2);\n        if (mid > 0 && mid < trials.length) {\n            visited.push(trials[mid]);\n        }\n\n        let random = Math.floor(Math.random() * mid);\n\n        if (random > 0 && random < mid) {\n            visited.push(trials[random]);\n        }\n\n        random = Math.floor(\n            Math.random() * (trials.length - 1 - (mid + 1) + (mid + 1))\n        );\n\n        if (random > 0 && random < trials.length) {\n            visited.push(trials[random]);\n        }\n        visited.push(trials[trials.length - 1]);\n    }\n    return visited;\n};\n\nfunction MapContainer(props) {\n    reduceSize(props.trials);\n    return (\n        <Map\n            key={props.trials && props.trials.length}\n            google={props.google}\n            center={{\n                lat:\n                    props.trials && props.trials.length > 0\n                        ? Number(\n                              props.trials[0].locations.length !== 0 &&\n                                  props.trials[0].locations[\n                                      props.selectedLocation\n                                          ? props.selectedLocation\n                                          : 0\n                                  ].lat\n                          )\n                        : 39.2904,\n                lng:\n                    props.trials && props.trials.length > 0\n                        ? Number(\n                              props.trials[0].locations.length !== 0 &&\n                                  props.trials[0].locations[\n                                      props.selectedLocation\n                                          ? props.selectedLocation\n                                          : 0\n                                  ].lng\n                          )\n                        : -76.6122\n            }}\n            style={styles}\n            onReady={(_, map) => {\n                if (props.trials && props.trials.length >= 1) {\n                    const bounds = new window.google.maps.LatLngBounds();\n                    reduceSize(props.trials).forEach(trial => {\n                        if (trial.locations[0]) {\n                            bounds.extend(\n                                new window.google.maps.LatLng(\n                                    trial.locations[0].lat,\n                                    trial.locations[0].lng\n                                )\n                            );\n                        }\n                    });\n                    map.fitBounds(bounds);\n                    if (props.trialDetails) {\n                        map.setZoom(13);\n                    }\n                }\n            }}\n            onCenterChanged={(_, map) => {\n                if (props.trialDetails) map.setZoom(13);\n            }}\n            onRecenter={(_, map) => {\n                if (props.trialDetails) map.setZoom(13);\n            }}\n        >\n            {props.otherLocations\n                ? props.trials[0].locations.map((location, index) => {\n                      return (\n                          <Marker\n                              key={index}\n                              title={\n                                  props.trials[0].locations[\n                                      props.selectedLocation\n                                          ? props.selectedLocation\n                                          : 0\n                                  ].facility_name +\n                                  \" - \" +\n                                  location.city\n                              }\n                              name={\n                                  props.trials[0].locations[\n                                      props.selectedLocation\n                                          ? props.selectedLocation\n                                          : 0\n                                  ].facility_name +\n                                  \" - \" +\n                                  location.city\n                              }\n                              position={{\n                                  lat: location.lat,\n                                  lng: location.lng\n                              }}\n                              icon={{\n                                  url: \"marker.png\"\n                              }}\n                          >\n                          </Marker>\n                      );\n                  })\n                : props.trials.map((trial, index) => {\n                      if (\n                          trial.locations[\n                              props.selectedLocation\n                                  ? props.selectedLocation\n                                  : 0\n                          ]\n                      ) {\n                          return (\n                              <Marker\n                                  key={index}\n                                  title={\n                                      trial.locations[\n                                          props.selectedLocation\n                                              ? props.selectedLocation\n                                              : 0\n                                      ].facility_name\n                                  }\n                                  name={\n                                      trial.locations[\n                                          props.selectedLocation\n                                              ? props.selectedLocation\n                                              : 0\n                                      ].facility_name\n                                  }\n                                  position={{\n                                      lat:\n                                          trial.locations[\n                                              props.selectedLocation\n                                                  ? props.selectedLocation\n                                                  : 0\n                                          ].lat,\n                                      lng:\n                                          trial.locations[\n                                              props.selectedLocation\n                                                  ? props.selectedLocation\n                                                  : 0\n                                          ].lng\n                                  }}\n                                  icon={{\n                                      url: \"marker.png\"\n                                  }}\n                              >\n                              </Marker>\n                          );\n                      } else {\n                          return null;\n                      }\n                  })}\n        </Map>\n    );\n}\n\n// you need to create new API from google console \n// https://developers.google.com/maps/gmp-get-started#enable-api-sdk\n\nexport default GoogleApiWrapper({\n    apiKey: process.env.GOOGLE_API_KEY\n  })(MapContainer)","// import React from \"react\";\nimport Map from \"../../components/Map/Map\"\nimport React, { useState, useEffect } from 'react'\n\nimport Data from \"./trials.json\";\n\nconst MapContainer = () => {\n    return (\n        <div>\n            <Map trials={Data}/> \n        </div>\n    )\n}\n\nexport default MapContainer\n","import './App.css';\nimport React from \"react\";\n\nimport MapContainer from \"./containers/MapContainer/MapContainer\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          <a href=\"/\" className=\"linkCustom\">\n            <img src=\"favicon.ico\" alt=\"ancora-logo\"></img>\n            <h2>Ancora</h2>\n          </a>\n      </header>\n      <content>\n        <MapContainer />\n      </content>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}